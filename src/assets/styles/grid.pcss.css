@import 'array-vars.pcss.css';

.grid {
  --_row_g: var(--row_g, var(--gutter));
  --_row_col: var(--row_col, 12);

  /* Calculate spaces */
  --row-calc_gap: calc(var(--_row_g) * (var(--_row_col) - 1));

  display: grid;
  gap: var(--_row_g);
  grid-template-columns: repeat(
    var(--_row_col),
    calc((var(--_container-mw) - var(--row-calc_gap)) / var(--_row_col))
  );

  & > *:not([class*='col-']) {
    grid-column: span 12;
  }

  & > .col-span-2 {
    grid-column: span 2;
  }
  & > .col-span-3 {
    grid-column: span 3;
  }
  & > .col-span-4 {
    grid-column: span 4;
  }
  & > .col-span-5 {
    grid-column: span 5;
  }
  & > .col-span-6 {
    grid-column: span 6;
  }
  & > .col-span-7 {
    grid-column: span 7;
  }
  & > .col-span-8 {
    grid-column: span 8;
  }
  & > .col-span-9 {
    grid-column: span 9;
  }
  & > .col-span-10 {
    grid-column: span 10;
  }
  & > .col-span-11 {
    grid-column: span 11;
  }
  & > .col-span-12 {
    grid-column: span 12;
  }

  .col-end-1 {
    grid-column-end: 1;
  }
  .col-start-1 {
    grid-column-start: 1;
  }
}

.grid-responsive {
  --_gr--layout-gap: var(--gr--layout-gap, 20px);
  --_gr--column-count: var(--gr--column-count, 4);
  --_gr--cell-minW: var(--gr--cell-minW, 200px);

  /** Calculated values. */
  --gr--gap-count: calc(var(--_gr--column-count) - 1);
  --gr--total-gap-width: calc(var(--gr--gap-count) * var(--_gr--layout-gap));
  --gr-item--maxW: calc(
    (100% - var(--gr--total-gap-width)) / var(--_gr--column-count)
  );

  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(min(max(var(--_gr--cell-minW), var(--gr-item--maxW)), 100%), 1fr)
  );
  gap: var(--_gr--layout-gap);
}

/* @each $col $i in $col-count {
  .col-$(col) {
    width: calc((100% / $(col-count-nr)) * $(col));
  }
}

@each $size $i in $array-size {
  .g-$(i),
  .gx-$(i) {
    --gutter-x: var(--$(size));
  }

  .g-$(i),
  .gy-$(i) {
    --gutter-y: var(--$(size));
  }
}

@each $media in $array-media {
  @media (--$(media)) {
    .col-$(media) {
      flex: 1 0 0%;
    }

    .col-$(media)-auto {
      width: auto;
    }

    @each $col $i in $col-count {
      .col-$(media)-$(col) {
        width: calc((100% / $(col-count-nr)) * $(col));
      }
    }

    @each $size $i in $array-size {
      .g-$(media)-$(i),
      .gx-$(media)-$(i) {
        --gutter-x: var(--$(size));
      }

      .g-$(media)-$(i),
      .gy-$(media)-$(i) {
        --gutter-y: var(--$(size));
      }
    }
  }
} */
